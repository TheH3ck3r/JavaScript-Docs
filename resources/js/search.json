[[{"l":"Главная"},{"l":"Методы функций","p":["- Является одним из методов, который можно использовать с функциональными объектами в JavaScript. Он позволяет вызывать функцию с заданным значением this и аргументами, предоставленными в виде массива (или псевдомассива).","- Это метод, который используется для привязки контекста (значения this) и, возможно, аргументов функции.","- Это метод, который позволяет явно указать, на каком объекте функция должна быть вызвана."]},{"l":"Методы массивов","p":["- Это метод, который позволяет объединять два или более массива.","- Этот метод проверяет, удовлетворяют ли все элементы массива условию, задаваемому в передаваемой функции.","- Этот метод позволяет создать новый массив, включающий в себя только те элементы исходного массива, которые удовлетворяют определенному условию, заданному с помощью функции обратного вызова.","- Это метод, который используется для выполнения функции обратного вызова один раз для каждого элемента в массиве в порядке их возрастания."]},{"l":"Методы строк","p":["- Этот метод позволяет получить числовое значение (код) UTF-16 для символа на указанной позиции в строке."]},{"l":"Методы регулярных выражений","p":["- Это метод, который используется для поиска совпадений в строке и извлечения информации из этой строки."]},{"l":"Полиморфные методы","p":["- Это метод, который используется для поиска первого вхождения заданного элемента в массиве или строки.","- Это метод, который используется для проверки наличия элемента в массиве или подстроки в строке."]},{"l":"Операторы","p":["- Это оператор, который используется для проверки, принадлежит ли объект определенному классу или является ли он экземпляром определенного типа."]}],[{"l":"Apply","p":["Метод apply является одним из методов, который можно использовать с функциональными объектами в JavaScript. Он позволяет вызывать функцию с заданным значением this и аргументами, предоставленными в виде массива (или псевдомассива).","Синтаксис: function.apply(thisArg, [argsArray])","function- функция, которую нужно вызвать","thisArg- значение this, которое будет использовано при вызове функции","argsArray(необязательный аргумент) - массив или псевдомассив, содержащий аргументы функции","Метод apply будет исполнять функцию, используя указанное значение this, и передавать аргументы функции из массива argsArray. Если argsArray не предоставлен, то функция будет вызвана без аргументов (или с undefined, если функция требует аргументы)."]},{"i":"прмиер-использования-apply","l":"Прмиер использования apply:","p":["В этом примере, мы объявили функцию greet, которая принимает два аргумента - имя и возраст. Затем мы создали объект person со свойствами name и age. С использованием метода apply, мы вызываем функцию greet() с объектом person в качестве значения this, и передаем аргументы name и age через массив ['Bob', 30].","Важно отметить, что apply идентичен методу call, за исключением того, что apply принимает массив аргументов, а call принимает отдельные аргументы.","Метод apply полезен в ситуациях, когда у вас есть функция, которая ожидает аргументы в виде массива или псевдомассива, и когда вам нужно использовать определенное значение this, отличное от контекста, в котором функция была определена."]}],[{"l":"Bind","p":["bind в JavaScript — это метод, который используется для привязки контекста (значения this) и, возможно, аргументов функции. Он не вызывает функцию сразу, а создает новую функцию, которая, при вызове, будет иметь указанный контекст и аргументы. Это полезно, например, когда нужно передать функцию как обработчик события или сохранить функцию с определенным контекстом для последующего вызова.","Синтаксис: const boundFunction = someFunction.bind(thisArg, arg1, arg2, ...);","someFunction: Функция, контекст и аргументы которой мы хотим привязать.","thisArg: Объект, который будет использоваться в качестве значения this при вызове функции.","arg1, arg2, ...: Аргументы, которые будут частично привязаны к функции."]},{"i":"пример-использования-bind","l":"Пример использования bind:","p":["В этом примере, когда getX вызывается через unboundGetX, значение this внутри функции теряется, и результатом будет undefined. Когда getX вызывается через boundGetX, используя bind, контекст привязывается к объекту obj, и результатом становится 42.","Применение bind также часто используется для создания функций с предопределенными аргументами:","Пример 1","Пример 2","В этом примере два аргумента первоначально привязаны к null, а третий равен 'L', и при вызове boundFunction с аргументами 'A', 'B' и 'C', вывод будет null L A.","bind не изменяет оригинальную функцию, а создает новую функцию с привязанным контекстом и аргументами. Это полезно в сценариях, где нужно сохранить определенный контекст для вызова функции позже."]}],[{"l":"Call","p":["Метод call в JavaScript представляет собой один из способов вызова функции, который позволяет явно указать, на каком объекте функция должна быть вызвана. Основное назначение call заключается в возможности изменить контекст выполнения функции (т.е. значение ключевого слова this) и передать аргументы функции в виде обычных параметров.","Синтаксис: function.call(thisArg, arg1, arg2, ...)","function- функция, которую хотим вызвать.","thisArg- объект, контекст выполнения функции.","arg1, arg2, ...- передаваемые аргументы функции в виде обычных параметров."]},{"i":"пример-использования-call","l":"Пример использования call:","p":["В данном примере, функция sayHello вызывается с помощью метода call. Контекст выполнения функции sayHello изменяется с помощью передачи объекта person1 или person2 в качестве значения thisArg в метод call. Это позволяет выводить разное приветствие в зависимости от значения свойства name у переданного объекта.","Другое преимущество метода call состоит в возможности передавать аргументы функции в виде обычных параметров, как показано в следующем примере:","В этом примере, первый аргумент функции sayHello передается в метод call и используется как обычный параметр функции. Контекст выполнения функции также указывается через метод call, передавая объект person1 или person2.","Метод call полезен в ситуациях, когда вам нужно явно указать, на каком объекте выполнить функцию или изменить контекст выполнения функции на определенный объект."]}],[{"l":"CharCodeAt","p":["Метод charCodeAt в JavaScript применяется к строкам и позволяет получить числовое значение (код) UTF-16 для символа на указанной позиции в строке.","Синтаксис: string.charCodeAt(index)","string: Строка, в которой вы хотите получить код символа.","index: Позиция символа в строке, для которой вы хотите получить код. Индексация начинается с нуля."]},{"i":"возвращаемое-значение","l":"Возвращаемое значение:","p":["charCodeAt возвращает целое число (код символа UTF-16) для символа на указанной позиции. Если указанная позиция находится за пределами длины строки, возвращается NaN."]},{"i":"примеры-использованияcharcodeat","l":"Примеры использования charCodeAt:","p":["Получение кода символа по индексу:","Итерация по строке и получение кодов символов:","Этот код перебирает строку \"JavaScript\" и выводит каждый символ и его код UTF-16.","Проверка наличия символов определенного кода:","В этом примере мы проверяем, есть ли символ с кодом 49(код символа '1') в строке \"abc123\" и выводим его позицию.","charCodeAt полезен, когда вам нужно работать с кодами символов в строке, например, при обработке текста или выполнении определенных операций на уровне символов."]}],[{"l":"Concat","p":["Метод concat() в JavaScript используется для объединения двух или более массивов. Этот метод не изменяет исходные массивы, а создает новый массив, содержащий элементы из всех переданных массивов. Он возвращает новый массив, не изменяя оригинальные массивы.","Синтаксис: array.concat(array2, array3, ..., arrayN);","array1, array2, ..., arrayN: Один или несколько массивов, элементы которых вы хотите объединить."]},{"i":"пример-использования-concat","l":"Пример использования concat():","p":["В этом примере concat() используется для объединения трех массивов ( array1, array2, array3) в новый массив newArray.","Метод concat() также может использоваться для объединения массива с элементами других типов данных:","Этот метод также может быть использован для клонирования массива:","Важно отметить, что метод concat() создает новый массив и не изменяет оригинальные массивы. Если вам нужно изменить исходные массивы, вы должны использовать методы, такие как push() или splice()."]}],[{"l":"Every","p":["Метод every в JavaScript проверяет, удовлетворяют ли все элементы массива условию, задаваемому в передаваемой функции. Если хотя бы один элемент не удовлетворяет условию, every возвращает false. Если массив пустой, метод всегда возвращает true, так как для пустого набора элементов условие выполняется автоматически.","Синтаксис: array.every(callback(element[, index[, array]])[, thisArg])","callback: Функция, которая будет выполнена для каждого элемента массива.","element: Текущий элемент массива, для которого вызывается функция.","index(необязательно): Индекс текущего элемента.","array(необязательно): Сам массив, для которого вызван метод every.","thisArg(необязательно): Значение, которое будет использовано в качестве this для функции callback."]},{"i":"возвращаемое-значение","l":"Возвращаемое значение:","p":["Возвращает true, если для всех элементов массива функция callback вернула истинное значение.","Возвращает false, если хотя бы для одного элемента функция callback вернула ложное значение."]},{"i":"особенности-метода-every","l":"Особенности метода every:","p":["Ранний выход из цикла: Если метод every() находит хотя бы один элемент, который не соответствует условию, он немедленно прекращает выполнение и возвращает false. Это оптимизирует работу с большими массивами.","Не изменяет исходный массив: Как и большинство методов массива в JavaScript, every() не изменяет исходный массив, а только проверяет его элементы.","Работа с пустым массивом: Если массив пуст, то метод всегда возвращает true, так как для пустого множества элементов любое условие считается выполненным."]},{"i":"примеры-использования-every","l":"Примеры использования every:","p":["Все числа больше нуля:","Не все элементы соответствуют условию:","Проверка поля объекта:"]}],[{"l":"Exec","p":["exec- это метод объекта регулярного выражения ( RegExp), который используется для поиска совпадений в строке и извлечения информации из этой строки.","Синтаксис: regexp.exec(string)","regexp: Это объект регулярного выражения, на котором вызывается метод exec.","string: Это строка, в которой будет производиться поиск совпадений."]},{"i":"возвращаемое-значение","l":"Возвращаемое значение:","p":["Метод exec возвращает массив с совпадениями:","Если совпадение найдено, метод возвращает массив, в котором первый элемент - это совпадение, а последующие элементы - это значения групп совпадений, если они были определены в регулярном выражении.","Если совпадение не найдено, метод возвращает null."]},{"i":"примеры-использования-exec","l":"Примеры использования exec:","p":["Извлечение даты из строки:","Поиск всех чисел в тексте:","Поиск всех слов, начинающихся с буквы \"A\":"]}],[{"l":"Filter","p":["filter()- это один из методов массивов в JavaScript. Этот метод позволяет создать новый массив, включающий в себя только те элементы исходного массива, которые удовлетворяют определенному условию, заданному с помощью функции обратного вызова.","Синтаксис: array.filter(callback(element, index, array))","array: Исходный массив, который нужно отфильтровать.","callback: Функция, которая будет вызываться для каждого элемента массива.","element: Текущий элемент массива, который анализируется.","index(необязательный): Индекс текущего элемента.","array(необязательный): Исходный массив."]},{"i":"возвращаемое-значение","l":"Возвращаемое значение:","p":["filter() создает и возвращает новый массив, содержащий только элементы исходного массива, для которых функция обратного вызова возвращает true."]},{"i":"примеры-использованияfilter","l":"Примеры использования filter():","p":["Фильтрация чисел больше заданного порога:","Фильтрация строк, содержащих определенную подстроку:","Фильтрация объектов в массиве:","filter() полезен для выбора подмножества элементов массива, которые соответствуют определенным критериям, и создания нового массива на основе этих элементов."]}],[{"l":"ForEach","p":["forEach- это метод в JavaScript, который используется для выполнения функции обратного вызова один раз для каждого элемента в массиве в порядке их возрастания.","Синтаксис: array.forEach(function(currentValue, index, array) { Код }, thisArg)","currentValue: Текущий обрабатываемый элемент массива.","index: Индекс текущего элемента в массиве.","array: Ссылка на массив, по которому происходит итерация.","thisArg(необязательный): Значение, используемое в качестве this при выполнении функции обратного вызова."]},{"i":"пример-использования-foreach","l":"Пример использования forEach:"},{"l":"Примечания","p":["forEach не возвращает новый массив. Он просто выполняет функцию обратного вызова для каждого элемента массива.","Если функция обратного вызова изменяет массив, эти изменения видны в оригинальном массиве.","Если вам нужно создать новый массив на основе существующего, лучше использовать методы map или filter.","forEach удобен, когда вам нужно выполнить операцию для каждого элемента массива без создания нового массива."]}],[{"l":"Includes","p":["Метод includes() в JavaScript используется для проверки наличия элемента в массиве или подстроки в строке. Он возвращает логическое значение true, если элемент или подстрока найдены, и false, если нет.","Синтаксис includes() для массивов: array.includes(searchElement, fromIndex);","Синтаксис includes() для строк: string.includes(searchString, position);","array или string: Исходный массив или строка, в которой производится поиск.","searchElement или searchString: Элемент или строка, которую нужно найти в массиве или строке.","fromIndex(необязательный для массивов): Начальный индекс поиска. По умолчанию поиск начинается с индекса 0. Если fromIndex отрицателен, он рассчитывается как array.length + fromIndex.","position(необязательный для строк): Позиция, с которой начинается поиск. По умолчанию 0."]},{"i":"примеры-использования-includes-для-массивов","l":"Примеры использования includes() для массивов:"},{"i":"примеры-использования-includes-для-строк","l":"Примеры использования includes() для строк:","p":["Метод includes() особенно полезен, когда вам нужно быстро проверить наличие элемента или подстроки без необходимости получать их индекс. Он возвращает true, если элемент или подстрока найдены, и false, если нет."]}],[{"l":"IndexOf","p":["Метод indexOf в JavaScript используется для поиска первого вхождения заданного элемента в массиве или строки.","Синтаксис для массивов: array.indexOf(searchElement, startIndex)","Синтаксис для строк: string.indexOf(searchValue, startIndex)","array или string: Это массив или строка, в которых вы хотите выполнить поиск.","searchElement или searchValue: Это элемент или значение, которое вы ищете.","startIndex(опционально): Это индекс, с которого начнется поиск. Если не указан, поиск начнется с начала массива или строки.","indexOf возвращает индекс первого вхождения элемента (или значения) в массиве или строке. Если элемент (или значение) не найдено, метод возвращает -1."]},{"i":"примеры-использования-indexof-для-массивов","l":"Примеры использования indexOf для массивов:"},{"i":"примеры-использования-indexof-для-строк","l":"Примеры использования indexOf для строк:","p":["Метод indexOf полезен при поиске элементов или подстрок в данных и при принятии решений на основе их наличия в массиве или строке."]}],[{"l":"Instanceof","p":["Оператор instanceof в JavaScript используется для проверки, принадлежит ли объект определенному классу или является ли он экземпляром определенного типа. Также этот оператор позволяет определить, был ли объект создан с использованием конкретного конструктора.","Синтаксис: object instanceof constructor","object: Объект, который вы хотите проверить.","constructor: Функция, которая представляет класс или тип."]},{"i":"пример-использования-instanceof","l":"Пример использования instanceof:","p":["В данном примере myCar является экземпляром объекта Car, поэтому myCar instanceof Car возвращает true. Он также является экземпляром объекта Object, так как все объекты в JavaScript являются экземплярами Object. Однако, myCar instanceof Array возвращает false, потому что myCar не является массивом.","Когда вы используете instanceof, он проверяет цепочку прототипов объекта. Если объект является экземпляром класса (или конструктора), или его прототип является экземпляром этого класса, то оператор instanceof возвращает true, иначе - false.","Например:","Здесь myDog является экземпляром Dog, но также является экземпляром Animal, так как Dog.prototype был установлен как экземпляр Animal."]}],[{"l":"Фишки"},{"l":"Избавление от повторяющихся элементов в массиве","p":["Здесь используется:","Link; Метод spread (TODO)","Link; Встроенный объект Set (TODO)"]},{"i":"нахождение-количества-цифр-в-числе-за-о1","l":"Нахождение количества цифр в числе за О(1)","p":["Здесь используется:","Link; Встроенный объект Math (TODO)"]},{"i":"пояснение","l":"Пояснение:","p":["Этот код использует функции из стандартного объекта Math, чтобы определить количество цифр в числе number.","Math.log10(number): Эта функция возвращает десятичный логарифм числа number. Например, если number равно 100, то Math.log10(100) будет равно 2, так как 10 в степени 2 равно 100.","Math.round(Math.log10(number) + 1): Здесь мы берем десятичный логарифм числа number, увеличиваем его на 1(чтобы учесть саму цифру в числе), и округляем результат до ближайшего целого числа с помощью Math.round(). Это дает нам количество цифр в числе number."]},{"l":"Подсчет вхождения каждого элемента в строке","p":["Здесь используется:","Link; Метод spread (TODO)","Link; Метод reduce (TODO)"]},{"i":"пояснение-1","l":"Пояснение:","p":["Этот код использует метод массивов reduce() для анализа строки str и подсчета частоты встречаемости каждого символа в этой строке.","[...str]: Это преобразует строку str в массив, разбивая ее на отдельные символы. Например, если str равно hello, то [...str] будет равно [h, e, l, l, o].",".reduce((result, symbol) = ((result[symbol] = (result[symbol] || 0) + 1), result), {}): Этот метод reduce() проходит по каждому элементу массива (в данном случае, по каждому символу строки).","Функция обратного вызова, переданная в reduce(), выполняется для каждого элемента массива. В данном случае, она выполняется для каждого символа строки.","result[symbol] = (result[symbol] || 0) + 1: Здесь проверяется, есть ли уже запись для текущего символа symbol в объекте result. Если она уже существует, увеличивается значение счетчика для этого символа на 1. Если она не существует (т.е. result[symbol] равен undefined), тогда значение счетчика устанавливается в 1.","В итоге, в объекте result будут содержаться частоты встречаемости каждого символа в строке."]}]]